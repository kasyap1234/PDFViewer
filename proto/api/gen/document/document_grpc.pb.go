// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: document.proto

package document

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocumentManager_UploadDocument_FullMethodName = "/document.DocumentManager/UploadDocument"
	DocumentManager_GetDocument_FullMethodName    = "/document.DocumentManager/GetDocument"
	DocumentManager_ListDocuments_FullMethodName  = "/document.DocumentManager/ListDocuments"
	DocumentManager_UpdateMetaData_FullMethodName = "/document.DocumentManager/UpdateMetaData"
	DocumentManager_DeleteDocument_FullMethodName = "/document.DocumentManager/DeleteDocument"
)

// DocumentManagerClient is the client API for DocumentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentManagerClient interface {
	UploadDocument(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadDocumentRequest, UploadDocumentResponse], error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	UpdateMetaData(ctx context.Context, in *UpdateMetaDataRequest, opts ...grpc.CallOption) (*UpdateMetaDataResponse, error)
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DocumentMetadata, error)
}

type documentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentManagerClient(cc grpc.ClientConnInterface) DocumentManagerClient {
	return &documentManagerClient{cc}
}

func (c *documentManagerClient) UploadDocument(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadDocumentRequest, UploadDocumentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DocumentManager_ServiceDesc.Streams[0], DocumentManager_UploadDocument_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadDocumentRequest, UploadDocumentResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DocumentManager_UploadDocumentClient = grpc.ClientStreamingClient[UploadDocumentRequest, UploadDocumentResponse]

func (c *documentManagerClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentManager_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentManagerClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, DocumentManager_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentManagerClient) UpdateMetaData(ctx context.Context, in *UpdateMetaDataRequest, opts ...grpc.CallOption) (*UpdateMetaDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetaDataResponse)
	err := c.cc.Invoke(ctx, DocumentManager_UpdateMetaData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentManagerClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DocumentMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentMetadata)
	err := c.cc.Invoke(ctx, DocumentManager_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentManagerServer is the server API for DocumentManager service.
// All implementations must embed UnimplementedDocumentManagerServer
// for forward compatibility.
type DocumentManagerServer interface {
	UploadDocument(grpc.ClientStreamingServer[UploadDocumentRequest, UploadDocumentResponse]) error
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	UpdateMetaData(context.Context, *UpdateMetaDataRequest) (*UpdateMetaDataResponse, error)
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DocumentMetadata, error)
	mustEmbedUnimplementedDocumentManagerServer()
}

// UnimplementedDocumentManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentManagerServer struct{}

func (UnimplementedDocumentManagerServer) UploadDocument(grpc.ClientStreamingServer[UploadDocumentRequest, UploadDocumentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedDocumentManagerServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocumentManagerServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDocumentManagerServer) UpdateMetaData(context.Context, *UpdateMetaDataRequest) (*UpdateMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetaData not implemented")
}
func (UnimplementedDocumentManagerServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DocumentMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDocumentManagerServer) mustEmbedUnimplementedDocumentManagerServer() {}
func (UnimplementedDocumentManagerServer) testEmbeddedByValue()                         {}

// UnsafeDocumentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentManagerServer will
// result in compilation errors.
type UnsafeDocumentManagerServer interface {
	mustEmbedUnimplementedDocumentManagerServer()
}

func RegisterDocumentManagerServer(s grpc.ServiceRegistrar, srv DocumentManagerServer) {
	// If the following call pancis, it indicates UnimplementedDocumentManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocumentManager_ServiceDesc, srv)
}

func _DocumentManager_UploadDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentManagerServer).UploadDocument(&grpc.GenericServerStream[UploadDocumentRequest, UploadDocumentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DocumentManager_UploadDocumentServer = grpc.ClientStreamingServer[UploadDocumentRequest, UploadDocumentResponse]

func _DocumentManager_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentManagerServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentManager_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentManagerServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentManager_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentManagerServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentManager_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentManagerServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentManager_UpdateMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentManagerServer).UpdateMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentManager_UpdateMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentManagerServer).UpdateMetaData(ctx, req.(*UpdateMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentManager_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentManagerServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentManager_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentManagerServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentManager_ServiceDesc is the grpc.ServiceDesc for DocumentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "document.DocumentManager",
	HandlerType: (*DocumentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocument",
			Handler:    _DocumentManager_GetDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _DocumentManager_ListDocuments_Handler,
		},
		{
			MethodName: "UpdateMetaData",
			Handler:    _DocumentManager_UpdateMetaData_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _DocumentManager_DeleteDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadDocument",
			Handler:       _DocumentManager_UploadDocument_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "document.proto",
}
