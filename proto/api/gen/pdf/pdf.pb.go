// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: pdf.proto

package pdf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PDFInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *PDFInfoRequest) Reset() {
	*x = PDFInfoRequest{}
	mi := &file_pdf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PDFInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFInfoRequest) ProtoMessage() {}

func (x *PDFInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFInfoRequest.ProtoReflect.Descriptor instead.
func (*PDFInfoRequest) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{0}
}

func (x *PDFInfoRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type PDFInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageCount   int32  `protobuf:"varint,1,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	FileName    string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Author      string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	IsEncrypted bool   `protobuf:"varint,4,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
}

func (x *PDFInfoResponse) Reset() {
	*x = PDFInfoResponse{}
	mi := &file_pdf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PDFInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFInfoResponse) ProtoMessage() {}

func (x *PDFInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFInfoResponse.ProtoReflect.Descriptor instead.
func (*PDFInfoResponse) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{1}
}

func (x *PDFInfoResponse) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *PDFInfoResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PDFInfoResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PDFInfoResponse) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

type PDFPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath   string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileId     string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	PageNumber int32  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
}

func (x *PDFPageRequest) Reset() {
	*x = PDFPageRequest{}
	mi := &file_pdf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PDFPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFPageRequest) ProtoMessage() {}

func (x *PDFPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFPageRequest.ProtoReflect.Descriptor instead.
func (*PDFPageRequest) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{2}
}

func (x *PDFPageRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *PDFPageRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *PDFPageRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type PDFPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageData []byte `protobuf:"bytes,1,opt,name=page_data,json=pageData,proto3" json:"page_data,omitempty"`
}

func (x *PDFPageResponse) Reset() {
	*x = PDFPageResponse{}
	mi := &file_pdf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PDFPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFPageResponse) ProtoMessage() {}

func (x *PDFPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFPageResponse.ProtoReflect.Descriptor instead.
func (*PDFPageResponse) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{3}
}

func (x *PDFPageResponse) GetPageData() []byte {
	if x != nil {
		return x.PageData
	}
	return nil
}

type SearchPDFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Query  string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SearchPDFRequest) Reset() {
	*x = SearchPDFRequest{}
	mi := &file_pdf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPDFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPDFRequest) ProtoMessage() {}

func (x *SearchPDFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPDFRequest.ProtoReflect.Descriptor instead.
func (*SearchPDFRequest) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{4}
}

func (x *SearchPDFRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *SearchPDFRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchPDFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber int32          `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	Matches    []*SearchMatch `protobuf:"bytes,2,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *SearchPDFResponse) Reset() {
	*x = SearchPDFResponse{}
	mi := &file_pdf_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPDFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPDFResponse) ProtoMessage() {}

func (x *SearchPDFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPDFResponse.ProtoReflect.Descriptor instead.
func (*SearchPDFResponse) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{5}
}

func (x *SearchPDFResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *SearchPDFResponse) GetMatches() []*SearchMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

type SearchMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Confidence float32      `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Bounds     *BoundingBox `protobuf:"bytes,3,opt,name=bounds,proto3" json:"bounds,omitempty"`
}

func (x *SearchMatch) Reset() {
	*x = SearchMatch{}
	mi := &file_pdf_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatch) ProtoMessage() {}

func (x *SearchMatch) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatch.ProtoReflect.Descriptor instead.
func (*SearchMatch) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{6}
}

func (x *SearchMatch) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SearchMatch) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *SearchMatch) GetBounds() *BoundingBox {
	if x != nil {
		return x.Bounds
	}
	return nil
}

type BoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Width  float32 `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height float32 `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *BoundingBox) Reset() {
	*x = BoundingBox{}
	mi := &file_pdf_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBox) ProtoMessage() {}

func (x *BoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBox.ProtoReflect.Descriptor instead.
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{7}
}

func (x *BoundingBox) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *BoundingBox) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *BoundingBox) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *BoundingBox) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type TextExtractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId     string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	PageNumber *int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3,oneof" json:"page_number,omitempty"` // If not set, extract from all pages
}

func (x *TextExtractionRequest) Reset() {
	*x = TextExtractionRequest{}
	mi := &file_pdf_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextExtractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextExtractionRequest) ProtoMessage() {}

func (x *TextExtractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextExtractionRequest.ProtoReflect.Descriptor instead.
func (*TextExtractionRequest) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{8}
}

func (x *TextExtractionRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *TextExtractionRequest) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

type TextExtractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages []*PageText `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *TextExtractionResponse) Reset() {
	*x = TextExtractionResponse{}
	mi := &file_pdf_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextExtractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextExtractionResponse) ProtoMessage() {}

func (x *TextExtractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextExtractionResponse.ProtoReflect.Descriptor instead.
func (*TextExtractionResponse) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{9}
}

func (x *TextExtractionResponse) GetPages() []*PageText {
	if x != nil {
		return x.Pages
	}
	return nil
}

type PageText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber int32  `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	Content    string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PageText) Reset() {
	*x = PageText{}
	mi := &file_pdf_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageText) ProtoMessage() {}

func (x *PageText) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageText.ProtoReflect.Descriptor instead.
func (*PageText) Descriptor() ([]byte, []int) {
	return file_pdf_proto_rawDescGZIP(), []int{10}
}

func (x *PageText) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PageText) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

var File_pdf_proto protoreflect.FileDescriptor

var file_pdf_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x64, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x64, 0x66,
	0x22, 0x2d, 0x0a, 0x0e, 0x50, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x88, 0x01, 0x0a, 0x0f, 0x50, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x0e, 0x50, 0x44,
	0x46, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x0f, 0x50, 0x44, 0x46, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x44, 0x46,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x60, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x44, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x64, 0x66, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x64,
	0x66, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x06, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x0b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x66,
	0x0a, 0x15, 0x54, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x74, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x64, 0x66, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x84, 0x02, 0x0a,
	0x0c, 0x50, 0x44, 0x46, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x37, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x50, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x70, 0x64,
	0x66, 0x2e, 0x50, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x64, 0x66, 0x2e, 0x50, 0x44, 0x46, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x44, 0x46,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x64, 0x66, 0x2e, 0x50, 0x44, 0x46, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x64, 0x66, 0x2e,
	0x50, 0x44, 0x46, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x44, 0x46, 0x12, 0x15, 0x2e, 0x70,
	0x64, 0x66, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x44, 0x46, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x64, 0x66, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x44, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x64, 0x66,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x64, 0x66, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70,
	0x64, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pdf_proto_rawDescOnce sync.Once
	file_pdf_proto_rawDescData = file_pdf_proto_rawDesc
)

func file_pdf_proto_rawDescGZIP() []byte {
	file_pdf_proto_rawDescOnce.Do(func() {
		file_pdf_proto_rawDescData = protoimpl.X.CompressGZIP(file_pdf_proto_rawDescData)
	})
	return file_pdf_proto_rawDescData
}

var file_pdf_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pdf_proto_goTypes = []any{
	(*PDFInfoRequest)(nil),         // 0: pdf.PDFInfoRequest
	(*PDFInfoResponse)(nil),        // 1: pdf.PDFInfoResponse
	(*PDFPageRequest)(nil),         // 2: pdf.PDFPageRequest
	(*PDFPageResponse)(nil),        // 3: pdf.PDFPageResponse
	(*SearchPDFRequest)(nil),       // 4: pdf.SearchPDFRequest
	(*SearchPDFResponse)(nil),      // 5: pdf.SearchPDFResponse
	(*SearchMatch)(nil),            // 6: pdf.SearchMatch
	(*BoundingBox)(nil),            // 7: pdf.BoundingBox
	(*TextExtractionRequest)(nil),  // 8: pdf.TextExtractionRequest
	(*TextExtractionResponse)(nil), // 9: pdf.TextExtractionResponse
	(*PageText)(nil),               // 10: pdf.PageText
}
var file_pdf_proto_depIdxs = []int32{
	6,  // 0: pdf.SearchPDFResponse.matches:type_name -> pdf.SearchMatch
	7,  // 1: pdf.SearchMatch.bounds:type_name -> pdf.BoundingBox
	10, // 2: pdf.TextExtractionResponse.pages:type_name -> pdf.PageText
	0,  // 3: pdf.PDFProcessor.GetPDFInfo:input_type -> pdf.PDFInfoRequest
	2,  // 4: pdf.PDFProcessor.GetPDFPage:input_type -> pdf.PDFPageRequest
	4,  // 5: pdf.PDFProcessor.SearchPDF:input_type -> pdf.SearchPDFRequest
	8,  // 6: pdf.PDFProcessor.ExtractText:input_type -> pdf.TextExtractionRequest
	1,  // 7: pdf.PDFProcessor.GetPDFInfo:output_type -> pdf.PDFInfoResponse
	3,  // 8: pdf.PDFProcessor.GetPDFPage:output_type -> pdf.PDFPageResponse
	5,  // 9: pdf.PDFProcessor.SearchPDF:output_type -> pdf.SearchPDFResponse
	9,  // 10: pdf.PDFProcessor.ExtractText:output_type -> pdf.TextExtractionResponse
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_pdf_proto_init() }
func file_pdf_proto_init() {
	if File_pdf_proto != nil {
		return
	}
	file_pdf_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pdf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pdf_proto_goTypes,
		DependencyIndexes: file_pdf_proto_depIdxs,
		MessageInfos:      file_pdf_proto_msgTypes,
	}.Build()
	File_pdf_proto = out.File
	file_pdf_proto_rawDesc = nil
	file_pdf_proto_goTypes = nil
	file_pdf_proto_depIdxs = nil
}
